head     1.1;
branch   1.1.1;
access   ;
symbols  v1:1.1.1.1 Cybertristam:1.1.1;
locks    ; strict;
comment  @# @;


1.1
date     2005.04.22.03.00.34;  author jwright;  state Exp;
branches 1.1.1.1;
next     ;

1.1.1.1
date     2005.04.22.03.00.34;  author jwright;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@/**
 * AUTHOR: jewright
 * DATE/TIME:  Mar 28, 2005
 * PROGRAM/FILENAME: net.cybertristam.service.FileIniStatisticsSvcImpl
 * EXPLANATION:
 * TEST DATA & EXPECTED RESULTS:
 * ENTRY:
 * EXPECTED RESULTS:
 * REVISION HISTORY:
 * VERSION NUMBER     DATE       AUTHOR
 *     1           Mar 28, 2005      jewright
 * REQUIREMENTS:
 * EDITOR/IDE: IntelliJ IDEA with VIM Keymap.
 */

package net.cybertristam.service;

import net.cybertristam.dataObjects.Statistics;
import net.cybertristam.dataObjects.ServerStatistics;
import net.cybertristam.dataObjects.ConnectionStatus;
import net.cybertristam.exception.StatisticsRetrieveException;
import net.cybertristam.exception.StatisticsStoreException;

import java.util.*;
import java.io.*;
import java.text.SimpleDateFormat;
import java.text.DateFormat;

public abstract class IFileStatisticsSvc implements IStatisticsSvc {
    private FilePropertiesReader fpr = new FilePropertiesReader(this.getClass().getSimpleName());
    protected String fileSuffix;

    public Statistics retrieve(String address) throws StatisticsRetrieveException {
        try {
            Statistics returnStatistics = new ServerStatistics();
            //List sockets = new ArrayList();
            //List tempSockets = new ArrayList();
            returnStatistics.setAddress(address);
            //Logic to find all connection stats files.
            List filenameList = getFilesInDir();
            filenameList = buildSubList(filenameList, address.toUpperCase());
            //Load all connection stats files into a collection.
            List connectionFiles = buildConnectionList(filenameList);
            //Load collection of address stats into server statistics
            returnStatistics.setSockets(connectionFiles);
            //Return server statistics
            return returnStatistics;
        } catch (Exception ex) {
            exceptionError(ex);
            return null;
        }
    }

    public Statistics retrieve(Integer portNumber, String key) throws StatisticsRetrieveException {
        try {
            Statistics returnStatistics = (Statistics) Factory.getInstance().getService(key);
            //List sockets = new ArrayList();
            //List tempSockets = new ArrayList();
            returnStatistics.setPortNumber(portNumber);
            returnStatistics.setPortNumber(portNumber);
            //Logic to find all connection stats files.
            List filenameList = getFilesInDir();
            filenameList = buildSubList(filenameList, portNumber.intValue() + "_" + key.toUpperCase());
            //Load all connection stats files into a collection.
            List connectionFiles = buildConnectionList(filenameList);
            //Load collection of address stats into server statistics
            returnStatistics.setSockets(connectionFiles);
            //Return server statistics
            return returnStatistics;
        } catch (Exception ex) {
            exceptionError(ex);
            return null;
        }
    }

    public Statistics retrieve(String address, Integer portNumber, String key) throws StatisticsRetrieveException {
        try {
            Statistics returnStatistics = (Statistics) Factory.getInstance().getService(key);
            //List sockets = new ArrayList();
            //List tempSockets = new ArrayList();
            returnStatistics.setAddress(address);
            returnStatistics.setPortNumber(portNumber);
            //Logic to find all connection stats files.
            List filenameList = getFilesInDir();
            filenameList = buildSubList(filenameList, address.toUpperCase() + "-" + portNumber.intValue() + "_" + key.toUpperCase());
            //Load all connection stats files into a collection.
            List connectionFiles = buildConnectionList(filenameList);
            //Load collection of address stats into server statistics
            returnStatistics.setSockets(connectionFiles);
            //Return server statistics
            return returnStatistics;
        } catch (Exception ex) {
            exceptionError(ex);
            return null;
        }
    }

    public abstract Boolean save(Statistics stat) throws StatisticsStoreException;

    protected String getFilename(ConnectionStatus socketToSave) {
        String filename = "default";
        String savePath = fpr.getProperty("SavePath");
        String fileSuffix = fpr.getProperty("FileSuffix");
        DateFormat dateFormat = new SimpleDateFormat(fpr.getProperty("DateFormat"));
        String saveName = socketToSave.getAddress() + "-" + socketToSave.getPortNumber() + "_" + socketToSave.getConnectionType();
        String saveSuffix = "_" + dateFormat.format(socketToSave.getConnectionStartTime().getTime()) + "_" + dateFormat.format(socketToSave.getConnectionEndTime().getTime());
        filename = savePath + "/" + saveName + saveSuffix + "." + fileSuffix;
        return filename;
    }

    protected List getFilesInDir() {
        String path = fpr.getProperty("DataPath");
        List returnList = new ArrayList();
        File fileDir = new File(path);
        File[] tempFile = fileDir.listFiles();
        for (int i = 0; i < tempFile.length; i++) {
            returnList.add(tempFile[i].getName());
        }
        return returnList;
    }

    protected List buildSubList(List filenames, String nameSearch) {
        List returnList = new ArrayList();
        String tempName;
        Iterator filenameIterator = filenames.iterator();
        for (int i = 0; i < filenames.size(); i++) {
            tempName = (String) filenameIterator.next();
            if (tempName.contains(new StringBuffer(nameSearch).subSequence(0, nameSearch.length()))) {
                returnList.add(tempName);
            }
        }
        return returnList;
    }

    protected List buildConnectionList(List filenames) {
        List returnList = new ArrayList();
        Iterator filenameIterator = filenames.iterator();
        for (int i = 0; i < filenames.size(); i++) {
            returnList.add(getConnectionFile((String) filenameIterator.next()));
        }
        return returnList;
    }

    protected abstract ConnectionStatus getConnectionFile(String filename);

    public String parseFilename(String filename){
        int value = filename.indexOf(fileSuffix);
        if(value > 0) {
            return filename.substring(0,value);
        }
        else {
            return filename;
        }
    }

    protected void exceptionError(Exception ex) {
        ex.printStackTrace();
    }
}
@


1.1.1.1
log
@no message
@
text
@@
